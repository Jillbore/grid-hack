#BlueJ class context
comment0.params=r\ c
comment0.target=Location(int,\ int)
comment0.text=\nConstructs\ a\ location\ with\ given\ row\ and\ column\ coordinates.\n@param\ r\ the\ row\n@param\ c\ the\ column\n\n
comment1.target=int\ getRow()
comment1.text=\nGets\ the\ row\ coordinate.\n@return\ the\ row\ of\ this\ location\n\n
comment2.target=int\ getCol()
comment2.text=\nGets\ the\ column\ coordinate.\n@return\ the\ column\ of\ this\ location\n\n
comment3.params=direction
comment3.target=Location\ getAdjacentLocation(int)
comment3.text=\nGets\ the\ adjacent\ location\ in\ any\ one\ of\ the\ eight\ compass\ directions.\n@param\ direction\ the\ direction\ in\ which\ to\ find\ a\ neighbor\ location\n@return\ the\ adjacent\ location\ in\ the\ direction\ that\ is\ closest\ to\n<tt>direction</tt>\n\n
comment4.params=target
comment4.target=int\ getDirectionToward(Location)
comment4.text=\nReturns\ the\ direction\ from\ this\ location\ toward\ another\ location.\ The\ndirection\ is\ rounded\ to\ the\ nearest\ compass\ direction.\n@param\ target\ another\ location\n@return\ the\ closest\ compass\ direction\ from\ this\ location\ toward\n<code>target</code>\n\n
comment5.params=other
comment5.target=boolean\ equals(Object)
comment5.text=\nIndicates\ whether\ some\ other\ <code>Location</code>\ object\ is\ "equal\ to"\nthis\ one.\n@param\ other\ the\ other\ location\ to\ test\n@return\ <code>true</code>\ if\ <code>other</code>\ is\ a\n<code>Location</code>\ with\ the\ same\ row\ and\ column\ as\ this\ location;\n<code>false</code>\ otherwise\n\n
comment6.target=int\ hashCode()
comment6.text=\nGenerates\ a\ hash\ code.\n@return\ a\ hash\ code\ for\ this\ location\n\n
comment7.params=other
comment7.target=int\ compareTo(Object)
comment7.text=\nCompares\ this\ location\ to\ <code>other</code>\ for\ ordering.\ Returns\ a\nnegative\ integer,\ zero,\ or\ a\ positive\ integer\ as\ this\ location\ is\ less\nthan,\ equal\ to,\ or\ greater\ than\ <code>other</code>.\ Locations\ are\nordered\ in\ row-major\ order.\ <br\ />\n(Precondition\:\ <code>other</code>\ is\ a\ <code>Location</code>\ object.)\n@param\ other\ the\ other\ location\ to\ test\n@return\ a\ negative\ integer\ if\ this\ location\ is\ less\ than\n<code>other</code>,\ zero\ if\ the\ two\ locations\ are\ equal,\ or\ a\ positive\ninteger\ if\ this\ location\ is\ greater\ than\ <code>other</code>\n\n
comment8.target=String\ toString()
comment8.text=\nCreates\ a\ string\ that\ describes\ this\ location.\n@return\ a\ string\ with\ the\ row\ and\ column\ of\ this\ location,\ in\ the\ format\n(row,\ col)\n\n
numComments=9
