#BlueJ class context
comment0.params=
comment0.target=void\ act()
comment0.text=\r\n\ A\ critter\ acts\ by\ getting\ a\ list\ of\ its\ neighbors,\ processing\ them,\r\n\ getting\ locations\ to\ move\ to,\ selecting\ one\ of\ them,\ and\ moving\ to\ the\r\n\ selected\ location.\r\n
comment1.params=
comment1.target=java.util.ArrayList\ getActors()
comment1.text=\r\n\ Gets\ the\ actors\ for\ processing.\ Implemented\ to\ return\ the\ actors\ that\r\n\ occupy\ neighboring\ grid\ locations.\ Override\ this\ method\ in\ subclasses\ to\r\n\ look\ elsewhere\ for\ actors\ to\ process.<br\ />\r\n\ Postcondition\:\ (1)\ The\ selected\ actors\ are\ contained\ in\ the\ same\ grid\ as\r\n\ this\ critter.\ (2)\ The\ state\ of\ all\ actors\ is\ unchanged.\r\n\ @return\ a\ list\ of\ actors\ that\ this\ critter\ wishes\ to\ process.\r\n
comment2.params=actors
comment2.target=void\ processActors(java.util.ArrayList)
comment2.text=\r\n\ Processes\ selected\ actors.\ Implemented\ to\ "eat"\ (i.e.\ remove)\ selected\r\n\ actors\ that\ are\ not\ rocks\ or\ critters.\ Override\ this\ method\ in\ subclasses\r\n\ to\ process\ actors\ in\ a\ different\ way.\ <br\ />\r\n\ Precondition\:\ All\ elements\ of\ <code>actors</code>\ are\ contained\ in\ the\r\n\ same\ grid\ as\ this\ critter.\ <br\ />\r\n\ Postcondition\:\ (1)\ The\ state\ of\ all\ grid\ occupants\ other\ than\ this\r\n\ critter\ and\ the\ elements\ of\ <code>actors</code>\ is\ unchanged.\ New\r\n\ occupants\ may\ be\ added\ to\ empty\ locations.\ (2)\ The\ location\ of\ this\r\n\ critter\ is\ unchanged.\r\n\ @param\ actors\ the\ actors\ to\ be\ processed\r\n
comment3.params=
comment3.target=java.util.ArrayList\ getMoveLocations()
comment3.text=\r\n\ Gets\ the\ possible\ locations\ for\ the\ next\ move.\ Implemented\ to\ return\ the\r\n\ empty\ neighboring\ locations.\ Override\ this\ method\ in\ subclasses\ to\ look\r\n\ elsewhere\ for\ move\ locations.<br\ />\r\n\ Postcondition\:\ (1)\ The\ move\ locations\ are\ valid\ in\ the\ grid\ of\ this\r\n\ critter.\ (2)\ The\ state\ of\ all\ actors\ is\ unchanged.\r\n\ @return\ a\ list\ of\ possible\ locations\ for\ the\ next\ move\r\n
comment4.params=locs
comment4.target=Location\ selectMoveLocation(java.util.ArrayList)
comment4.text=\r\n\ Selects\ the\ location\ for\ the\ next\ move.\ Implemented\ to\ randomly\ pick\ one\r\n\ of\ the\ possible\ locations,\ or\ to\ return\ the\ current\ location\ if\r\n\ <code>locs</code>\ has\ size\ 0.\ Override\ this\ method\ in\ subclasses\ that\r\n\ have\ another\ mechanism\ for\ selecting\ the\ next\ move\ location.\ <br\ />\r\n\ Precondition\:\ All\ locations\ in\ <code>locs</code>\ are\ valid\ in\ the\ grid\r\n\ of\ this\ critter.\ <br\ />\r\n\ Postcondition\:\ (1)\ The\ returned\ location\ is\ an\ element\ of\r\n\ <code>locs</code>,\ this\ Critter's\ current\ location,\ or\r\n\ <code>null</code>.\ (2)\ The\ state\ of\ all\ actors\ is\ unchanged.\r\n\ @param\ locs\ the\ possible\ locations\ for\ the\ next\ move\r\n\ @return\ the\ location\ that\ was\ selected\ for\ the\ next\ move.\r\n
comment5.params=loc
comment5.target=void\ makeMove(Location)
comment5.text=\r\n\ Moves\ this\ critter\ to\ the\ given\ location.\ Implemented\ to\ remove\ this\r\n\ critter\ from\ its\ grid\ if\ <code>loc</code>\ is\ <code>null</code>,\ and\r\n\ to\ move\ to\ <code>loc</code>\ otherwise.\ Override\ this\ method\ in\r\n\ subclasses\ that\ want\ to\ carry\ out\ other\ actions\ (for\ example,\ turning\r\n\ this\ critter\ or\ adding\ occupants\ in\ empty\ locations).\ <br\ />\r\n\ Precondition\:\ <code>loc</code>\ is\ valid\ in\ the\ grid\ of\ this\ critter\ or\r\n\ <code>null</code>.<br\ />\r\n\ Postcondition\:\ (1)\ The\ critter's\ location\ is\ <code>loc</code>.\ (2)\ The\r\n\ state\ of\ all\ other\ grid\ occupants\ is\ unchanged.\ A\ new\ occupant\ may\ be\r\n\ added\ to\ the\ critter's\ old\ location.\r\n\ @param\ loc\ the\ location\ to\ move\ to\r\n
numComments=6
