#BlueJ class context
comment0.target=void\ act()
comment0.text=\nA\ critter\ acts\ by\ getting\ a\ list\ of\ its\ neighbors,\ processing\ them,\ngetting\ locations\ to\ move\ to,\ selecting\ one\ of\ them,\ and\ moving\ to\ the\nselected\ location.\n\n
comment1.target=ArrayList<GridActor>\ getActors()
comment1.text=\nGets\ the\ actors\ for\ processing.\ Implemented\ to\ return\ the\ actors\ that\noccupy\ neighboring\ grid\ locations.\ Override\ this\ method\ in\ subclasses\ to\nlook\ elsewhere\ for\ actors\ to\ process.<br\ />\nPostcondition\:\ (1)\ The\ selected\ actors\ are\ contained\ in\ the\ same\ grid\ as\nthis\ critter.\ (2)\ The\ state\ of\ all\ actors\ is\ unchanged.\n@return\ a\ list\ of\ actors\ that\ this\ critter\ wishes\ to\ process.\n\n
comment2.params=actors
comment2.target=void\ processActors(ArrayList<GridActor>)
comment2.text=\nProcesses\ selected\ actors.\ Implemented\ to\ "eat"\ (i.e.\ remove)\ selected\nactors\ that\ are\ not\ rocks\ or\ critters.\ Override\ this\ method\ in\ subclasses\nto\ process\ actors\ in\ a\ different\ way.\ <br\ />\nPrecondition\:\ All\ elements\ of\ <code>actors</code>\ are\ contained\ in\ the\nsame\ grid\ as\ this\ critter.\ <br\ />\nPostcondition\:\ (1)\ The\ state\ of\ all\ grid\ occupants\ other\ than\ this\ncritter\ and\ the\ elements\ of\ <code>actors</code>\ is\ unchanged.\ New\noccupants\ may\ be\ added\ to\ empty\ locations.\ (2)\ The\ location\ of\ this\ncritter\ is\ unchanged.\n@param\ actors\ the\ actors\ to\ be\ processed\n\n
comment3.target=ArrayList<Location>\ getMoveLocations()
comment3.text=\nGets\ the\ possible\ locations\ for\ the\ next\ move.\ Implemented\ to\ return\ the\nempty\ neighboring\ locations.\ Override\ this\ method\ in\ subclasses\ to\ look\nelsewhere\ for\ move\ locations.<br\ />\nPostcondition\:\ (1)\ The\ move\ locations\ are\ valid\ in\ the\ grid\ of\ this\ncritter.\ (2)\ The\ state\ of\ all\ actors\ is\ unchanged.\n@return\ a\ list\ of\ possible\ locations\ for\ the\ next\ move\n\n
comment4.params=locs
comment4.target=Location\ selectMoveLocation(ArrayList<Location>)
comment4.text=\nSelects\ the\ location\ for\ the\ next\ move.\ Implemented\ to\ randomly\ pick\ one\nof\ the\ possible\ locations,\ or\ to\ return\ the\ current\ location\ if\n<code>locs</code>\ has\ size\ 0.\ Override\ this\ method\ in\ subclasses\ that\nhave\ another\ mechanism\ for\ selecting\ the\ next\ move\ location.\ <br\ />\nPrecondition\:\ All\ locations\ in\ <code>locs</code>\ are\ valid\ in\ the\ grid\nof\ this\ critter.\ <br\ />\nPostcondition\:\ (1)\ The\ returned\ location\ is\ an\ element\ of\n<code>locs</code>,\ this\ Critter's\ current\ location,\ or\n<code>null</code>.\ (2)\ The\ state\ of\ all\ actors\ is\ unchanged.\n@param\ locs\ the\ possible\ locations\ for\ the\ next\ move\n@return\ the\ location\ that\ was\ selected\ for\ the\ next\ move.\n\n
comment5.params=loc
comment5.target=void\ makeMove(Location)
comment5.text=\nMoves\ this\ critter\ to\ the\ given\ location.\ Implemented\ to\ remove\ this\ncritter\ from\ its\ grid\ if\ <code>loc</code>\ is\ <code>null</code>,\ and\nto\ move\ to\ <code>loc</code>\ otherwise.\ Override\ this\ method\ in\nsubclasses\ that\ want\ to\ carry\ out\ other\ actions\ (for\ example,\ turning\nthis\ critter\ or\ adding\ occupants\ in\ empty\ locations).\ <br\ />\nPrecondition\:\ <code>loc</code>\ is\ valid\ in\ the\ grid\ of\ this\ critter\ or\n<code>null</code>.<br\ />\nPostcondition\:\ (1)\ The\ critter's\ location\ is\ <code>loc</code>.\ (2)\ The\nstate\ of\ all\ other\ grid\ occupants\ is\ unchanged.\ A\ new\ occupant\ may\ be\nadded\ to\ the\ critter's\ old\ location.\n@param\ loc\ the\ location\ to\ move\ to\n\n
numComments=6
